// –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® URL –° RENDER.COM
const API_BASE = 'https://todo-erg-api.onrender.com';

// –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
const handleResponse = async (response) => {
  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(errorText || `HTTP error! status: ${response.status}`);
  }
  return await response.json();
};

export const jsonServerAPI = {
  // === –ó–ê–î–ê–ß–ò ===
  async createTask(taskData) {
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...', taskData);
      
      const response = await fetch(`${API_BASE}/tasks`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...taskData,
          id: undefined, // JSON Server —Å–∞–º —Å–æ–∑–¥–∞—Å—Ç ID
          createdAt: new Date().toISOString()
        }),
      });
      
      const result = await handleResponse(response);
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', result);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
    }
  },

  async getTasks() {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...');
      const response = await fetch(`${API_BASE}/tasks?_sort=createdAt&_order=desc`);
      const tasks = await handleResponse(response);
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞—è–≤–æ–∫:', tasks.length);
      return tasks;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—è–≤–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
    }
  },

  async updateTask(id, updates) {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:', id, updates);
      const response = await fetch(`${API_BASE}/tasks/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updates),
      });
      
      const result = await handleResponse(response);
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', result);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É.');
    }
  },

  async deleteTask(id) {
    try {
      console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:', id);
      const response = await fetch(`${API_BASE}/tasks/${id}`, {
        method: 'DELETE',
      });
      
      await handleResponse(response);
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞:', id);
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É.');
    }
  },

  // === –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ò ===
  async getAssignees() {
    try {
      const response = await fetch(`${API_BASE}/assignees`);
      const assigneesData = await handleResponse(response);
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏–º–µ–Ω
      return assigneesData.map(item => item.name);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:', error);
      // Fallback –¥–∞–Ω–Ω—ã–µ
      return ['–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω', '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä'];
    }
  },

  async createAssignee(assigneeName) {
    try {
      const response = await fetch(`${API_BASE}/assignees`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name: assigneeName }),
      });
      
      await handleResponse(response);
      return assigneeName;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.');
    }
  },

  async deleteAssignee(assigneeName) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ ID
      const response = await fetch(`${API_BASE}/assignees`);
      const assignees = await handleResponse(response);
      const assignee = assignees.find(a => a.name === assigneeName);
      
      if (assignee) {
        await fetch(`${API_BASE}/assignees/${assignee.id}`, {
          method: 'DELETE',
        });
      }
      
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.');
    }
  }
};